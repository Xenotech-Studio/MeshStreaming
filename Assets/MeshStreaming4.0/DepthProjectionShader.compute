#pragma kernel CSMain

// 输出纹理：存储计算结果
Texture2D<float4> ResultSrc : register(t2);   // 只读
RWTexture2D<float4> Result   : register(u0);  // 写（继续用原来的名字）
// 输入深度纹理（深度存储在红色通道）
Texture2D<float> depthTexture1 : register(t0);
Texture2D<float> depthTexture2 : register(t1);

// 相机和图像参数
uniform float3 inputCameraPos1;
uniform float3 inputCameraPos2;
uniform float3 outputCameraPos;
uniform float3 inputCameraRotation1;
uniform float3 inputCameraRotation2;
uniform float3 outputCameraRotation;
uniform float fovInput1;
uniform float fovOutput;
uniform int inputWidth;
uniform int inputHeight;
uniform int outputWidth;
uniform int outputHeight;

// 新的输出颜色
uniform float4 outputColor;

// Splat 半径（默认 3）
uniform float splatRadius;

// 根据 Euler 角生成旋转矩阵
float3x3 EulerToRotationMatrix(float3 euler)
{
    float3 rad = euler * (3.14159265 / 180.0);
    float cx = cos(rad.x);
    float sx = sin(rad.x);
    float cy = cos(rad.y);
    float sy = sin(rad.y);
    float cz = cos(rad.z);
    float sz = sin(rad.z);

    float3x3 rx = float3x3( 1,    0,   0,
                            0,   cx, -sx,
                            0,   sx,  cx);
        
    float3x3 ry = float3x3( cy,   0,   sy,
                            0,    1,    0,
                           -sy,   0,   cy);
       
    float3x3 rz = float3x3( cz, -sz,  0,
                            sz,  cz,  0,
                            0,    0,  1);

    return mul(rz, mul(ry, rx));
}

void ProcessDepth(float d_in, uint3 id, float r_in, float4 outColor, float3 inputCameraPos, float3 inputCameraRotation, float fovInput)
{
    // 将输入坐标转换为归一化屏幕坐标（范围 [-1,1]）
    float u = ((float)id.x + 0.5 - (float)inputWidth * 0.5) / ((float)inputWidth * 0.5) / 2;
    float v = ((float)id.y + 0.5 - (float)inputHeight * 0.5) / ((float)inputHeight * 0.5) / 2;

    // 重构输入相机空间中的三维坐标
    float3 P_in = float3(u * d_in * fovInput, v * d_in * fovInput, d_in);

    // 从输入相机空间转换到世界坐标
    float3x3 R_in = EulerToRotationMatrix(inputCameraRotation);
    float3 P_world = inputCameraPos + mul(R_in, P_in);

    // 从世界坐标转换到输出相机坐标
    float3x3 R_out = EulerToRotationMatrix(outputCameraRotation);
    float3x3 R_out_inv = transpose(R_out);
    float3 P_out = mul(R_out_inv, (P_world - outputCameraPos));

    // 如果深度在输出相机后方，则跳过
    if (P_out.z <= 0.0)
        return;

    // 透视投影：将相机坐标投影到屏幕空间
    float u_out = (P_out.x / P_out.z) * fovOutput;
    float v_out = (P_out.y / P_out.z) * fovOutput;

    // 将归一化屏幕坐标映射回输出图像像素坐标
    float x_out = (u_out*2 + 1.0) * 0.5 * (float)outputWidth;
    float y_out = (v_out*2 + 1.0) * 0.5 * (float)outputHeight;

    // 计算输出深度
    float d_out = P_out.z;

    // 反算深度值：r_out = 0.2980392 / d_out
    float r_out = (d_out > 0.0) ? (0.2980392 / d_out) : 0.0;

    // 计算在输出图上的splatRadius
    int actualSplatRadius = (int)(splatRadius);

    // --- begin new splat loop ---
    for (int dx = -actualSplatRadius; dx <= actualSplatRadius; dx++)
    {
        for (int dy = -actualSplatRadius; dy <= actualSplatRadius; dy++)
        {
            // ① 圆形判定：若超出圆，则跳过
            float distSq = (float)(dx * dx + dy * dy);
            if (distSq > (float)(actualSplatRadius * actualSplatRadius)) continue;

            int2 outCoord = int2(x_out + dx, y_out + dy);

            // ② 落在屏幕内才处理
            if (outCoord.x < 0 || outCoord.x >= outputWidth ||
                outCoord.y < 0 || outCoord.y >= outputHeight)
                continue;

            // ③ 与圆心距离的线性衰减（中心=1，半径=0）
            //float weight  = sqrt(1 - distSq/((float)(actualSplatRadius * actualSplatRadius)));
            //weight = weight/2 + 1/2;
            float weight = 1;

            // ④ 现有深度
            float r_existing = Result[outCoord].r;

            float r_wanted = r_out * weight;

            // ⑤ 若该像素更近 ⇒ 写入（并加入权重衰减）
            if (r_wanted > r_existing)
            {
                // Result[outCoord] = r_out * outColor;
                Result[outCoord] = r_wanted * outColor;
            }
        }
    }
    // --- end new splat loop ---
}

[numthreads(16,16,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= inputWidth || (int)id.y >= inputHeight)
        return;

    // 读取输入深度值（r 通道）
    float r_in1 = depthTexture1[int2(id.xy)];
    if (r_in1 != 0.0)
    {
        // 计算实际深度：d_in = 0.2980392 / r_in
        float d_in1 = 0.2980392 / r_in1 + 0.01;
        
        // 使用 inputCamera1 的深度
        ProcessDepth(d_in1, id, r_in1, outputColor, inputCameraPos1, inputCameraRotation1, fovInput1);
    }
    
    float r_in2 = depthTexture2[int2(id.xy)];
    if (r_in2 != 0.0)
    {
        // 计算实际深度：d_in = 0.2980392 / r_in
        float d_in2 = 0.2980392 / r_in2 + 0.01;
        
        // 使用 inputCamera2 的深度
        ProcessDepth(d_in2, id, r_in2, outputColor, inputCameraPos2, inputCameraRotation2, fovInput1);
    }
}

#pragma kernel CSSmooth

[numthreads(16,16,1)]
void CSSmooth(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= outputWidth || id.y >= outputHeight) return;

    // 5×5 高斯 (1 4 6 4 1)^2 / 256
    const uint  k[5] = { 1, 4, 6, 4, 1 };
    float4 sum     = 0;
    uint   wSum    = 0;

    for (int dx = -2; dx <= 2; ++dx)
    {
        int sx = id.x + dx;
        if (sx < 0 || sx >= outputWidth) continue;
        uint wx = k[abs(dx)];

        for (int dy = -2; dy <= 2; ++dy)
        {
            int sy = id.y + dy;
            if (sy < 0 || sy >= outputHeight) continue;
            uint wy = k[abs(dy)];

            uint  w  = wx * wy;   // 2D 权重
            sum  += ResultSrc[int2(sx, sy)] * (float)w;
            wSum += w;
        }
    }
    Result[id.xy] = sum / (float)wSum;   // 归一化
    // Result[id.xy] = ResultSrc[id.xy];
}

